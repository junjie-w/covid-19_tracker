{"version":3,"sources":["components/InfoBox.js","components/util.js","components/Map.js","components/LineGraph.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","active","covidCases","recovered","deaths","props","Card","onClick","className","CardContent","Typography","color","gutterBottom","casesTypeColors","hex","rgb","half_op","multiplier","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","viewport","zoom","TileLayer","url","attribution","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","Table","App","globalInfo","setGlobalInfo","setCountries","setInputCountry","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","getGlobalData","filteredCountries","name","iso2","filter","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","charAt","toUpperCase","slice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.31d3d585.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport './InfoBox.css'\r\n\r\n//export const InfoBox = ({ title, cases, total, active, isRed, ...props }) => {\r\nexport const InfoBox = ({ title, cases, total, active, covidCases, recovered, deaths, ...props }) => {\r\n  return (\r\n    //<Card onClick={props.onClick} className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"}`}>\r\n    <Card onClick={props.onClick} className={`infoBox ${active && \"infoBox--selected\"} ${covidCases && \"infoBox__cases__border\"} ${recovered && \"infoBox__recovered__border\"} ${deaths && \"infoBox__deaths__border\"}`}>\r\n      <CardContent>\r\n        <Typography color=\"textSecondary\" gutterBottom>\r\n          {title}\r\n        </Typography>\r\n        {/*<h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>*/}\r\n        <h2 className={`infoBox__cases ${covidCases && \"infoBox__cases__text\"} ${recovered && \"infoBox__recovered__text\"} ${deaths && \"infoBox__deaths__text\"}`}>\r\n          {cases}\r\n        </h2>\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n\r\n","import React from 'react';\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nexport const Map = ({ countries, casesType, center, zoom }) => {\r\n  const viewport = {\r\n    center: center,\r\n    zoom: zoom\r\n  }\r\n  //console.log(\"center and zoom\", center, zoom)\r\n\r\n  return (\r\n    <div className=\"map\">\r\n      {/*<MapContainer center={center} zoom={zoom}>*/}\r\n      {/*<LeafletMap center={center} zoom={zoom}>*/}\r\n      <LeafletMap viewport={viewport}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n        {/*</MapContainer>*/}\r\n      </LeafletMap>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nexport const LineGraph = ({ casesType }) => {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then(data => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: `${casesType === \"recovered\" ? \"rgba(125, 215, 29, 0.5)\" : `${casesType === \"cases\" ? \"rgba(204, 16, 52, 0.5)\" : \"rgba(251, 68, 67, 0.5)\"}`}`,\r\n                borderColor: `${casesType === \"recovered\" ? \"#7dd71d\" : `${casesType === \"cases\" ? \"#CC1034\" : \"#fb4443\"}`}`,\r\n                //backgroundColor: `${casesType === \"recovered\" ? \"rgba(125, 215, 29, 0.5)\" : \"rgba(204, 16, 52, 0.5)\"}`,\r\n                //borderColor: `${casesType === \"recovered\" ? \"#7dd71d\" : \"#CC1034\"}`,\r\n                //backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                //borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nexport const Table = ({ countries }) => {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map((country) => (\r\n        <tr>\r\n          <td>{country.country}</td>\r\n          <td>\r\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport { Card, CardContent, FormControl, MenuItem, Select } from \"@material-ui/core\";\nimport { InfoBox } from \"./components/InfoBox\";\nimport { Map } from \"./components/Map\";\nimport { LineGraph } from \"./components/LineGraph\";\nimport { Table } from './components/Table';\nimport { sortData, prettyPrintStat } from \"./components/util\";\nimport numeral from \"numeral\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [globalInfo, setGlobalInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  //const [mapCenter, setMapCenter] = useState({ lat: 55.3781, lng: -3.4360 });\n  //const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  //const [mapCenter, setMapCenter] = useState({ lat: 51.4934, lng: 0.0098 });\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  //const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: 0.0098 });\n  //const [mapZoom, setMapZoom] = useState(3);\n  //const [mapZoom, setMapZoom] = useState(3.5);\n  const [mapZoom, setMapZoom] = useState(2.35);\n  //const [flyTo, setFlyTo] = useState([34.8076, -40.4796])\n\n  useEffect(() => {\n    const getGlobalData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/all\")\n        .then(response => response.json())\n        .then(data => setGlobalInfo(data));\n    }\n    getGlobalData();\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then(response => response.json())\n        .then(data => {\n          const dataCountries = data.map(country => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          const filteredCountries = dataCountries.filter(country => country.value !== null);\n          setCountries(filteredCountries);\n          setMapCountries(data);\n          let sortedData = sortData(data);\n          setTableData(sortedData);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  console.log(\"casesType >>>\", casesType);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setGlobalInfo(data);\n        countryCode === \"worldwide\" ? setMapCenter([34.80746, 0.0098]) : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        //setMapCenter(countryCode === \"worldwide\" ? [34.80746, -40.4796] : [data.countryInfo.lat, data.countryInfo.long]) && setMapZoom(countryCode === \"worldwide\" ? 2.35 : 3.5);\n        countryCode === \"worldwide\" ? setMapZoom(2.35) : setMapZoom(3.785);\n        //setFlyTo(countryCode === \"worldwide\" ? [34.8076, -40.4796] : [data.countryInfo.lat, data.countryInfo.long], countryCode === \"worldwide\" ? 2.35 : 3.5)\n      });\n  };\n\n  console.log(\"GlobalInfo >>>\", globalInfo)\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1 className=\"app__title\">COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\" value={country} onChange={onCountryChange}>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            onClick={e => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            //isRed\n            covidCases\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(globalInfo.todayCases)}\n            total={numeral(globalInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={e => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            recovered\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(globalInfo.todayRecovered)}\n            total={numeral(globalInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={e => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            //isRed\n            deaths\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(globalInfo.todayDeaths)}\n            total={numeral(globalInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <div className=\"app__information\">\n            <h3 className=\"lineGraphTitle\">Worldwide New {casesType.charAt(0).toUpperCase() + casesType.slice(1)}</h3>\n            <LineGraph casesType={casesType} />\n            <h3 className=\"tableTitle\">Live Cases by Country</h3>\n            <Table countries={tableData} />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}